<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <subtitle>既然选择了远方，便只顾风雨兼程。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-05T14:47:21.510Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>00hello00</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker命令大全-rootfs命令及镜像仓库</title>
    <link href="http://example.com/2021/10/05/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8-%E5%AE%B9%E5%99%A8rootfs%E5%91%BD%E4%BB%A4%E4%B8%8E%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <id>http://example.com/2021/10/05/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8-%E5%AE%B9%E5%99%A8rootfs%E5%91%BD%E4%BB%A4%E4%B8%8E%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</id>
    <published>2021-10-05T14:45:23.000Z</published>
    <updated>2021-10-05T14:47:21.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器rootfs命令"><a href="#容器rootfs命令" class="headerlink" title="容器rootfs命令"></a>容器rootfs命令</h1><p>本文取自<a href="https://www.runoob.com/docker/docker-rm-command.html">https://www.runoob.com/docker/docker-rm-command.html</a>，博主整理这些命令主要是方便自己或其他需要的人来查阅</p><p>（1）docker commit :从容器创建一个新的镜像。</p><p>语法<br>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]<br>OPTIONS说明：</p><p>-a :提交的镜像作者；</p><p>-c :使用Dockerfile指令来创建镜像；</p><p>-m :提交时的说明文字；</p><p>-p :在commit时，将容器暂停。</p><span id="more"></span><p>实例<br>将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。</p><pre><code>runoob@runoob:~$ docker commit -a &quot;runoob.com&quot; -m &quot;my apache&quot; a404c6c174a2  mymysql:v1 sha256:37af1236adef1544e8886be23010b66577647a40bc02c0885a6600b33ee28057runoob@runoob:~$ docker images mymysql:v1REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmymysql             v1                  37af1236adef        15 seconds ago      329 MB</code></pre><hr><p>（2）docker cp :用于容器与主机之间的数据拷贝。</p><p>语法<br>docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</p><p>docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</p><p>OPTIONS说明：</p><p>-L :保持源目标中的链接</p><p>实例<br>将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。</p><p>docker cp /www/runoob 96f7f14e99ab:/www/</p><p>将主机/www/runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。</p><p>docker cp /www/runoob 96f7f14e99ab:/www</p><p>将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中。</p><p>docker cp  96f7f14e99ab:/www /tmp/</p><hr><p>（3）docker diff : 检查容器里文件结构的更改。</p><p>语法</p><p>docker diff [OPTIONS] CONTAINER</p><p>实例<br>查看容器mymysql的文件结构更改。</p><pre><code> runoob@runoob:~$ docker diff mymysql A /logs A /mysql_data C /run C /run/mysqld A /run/mysqld/mysqld.pid A /run/mysqld/mysqld.sock C /tmp</code></pre><hr><h1 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h1><p>（1）docker login : 登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p><p>docker logout : 登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p><p>语法<br>docker login [OPTIONS] [SERVER]</p><p>docker logout [OPTIONS] [SERVER]</p><p>OPTIONS说明：</p><p>-u :登陆的用户名</p><p>-p :登陆的密码</p><p>实例<br>登陆到Docker Hub</p><p>docker login -u 用户名 -p 密码</p><p>登出Docker Hub</p><p>docker logout</p><hr><p>（2）docker pull : 从镜像仓库中拉取或者更新指定镜像</p><p>语法<br>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</p><p>OPTIONS说明：</p><p>-a :拉取所有 tagged 镜像</p><p>–disable-content-trust :忽略镜像的校验,默认开启</p><p>实例<br>从Docker Hub下载java最新版镜像。</p><p>docker pull java</p><p>从Docker Hub下载REPOSITORY为java的所有镜像。</p><p>docker pull -a java</p><hr><p>（3）docker push : 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</p><p>语法<br>docker push [OPTIONS] NAME[:TAG]</p><p>OPTIONS说明：</p><p>–disable-content-trust :忽略镜像的校验,默认开启</p><p>实例<br>上传本地镜像myapache:v1到镜像仓库中。</p><p>docker push myapache:v1</p><hr><p>（4）docker search : 从Docker Hub查找镜像</p><p>语法<br>docker search [OPTIONS] TERM</p><p>OPTIONS说明：</p><p>–automated :只列出 automated build类型的镜像；</p><p>–no-trunc :显示完整的镜像描述；</p><p>-f &lt;过滤条件&gt;:列出收藏数不小于指定值的镜像。</p><p>实例<br>从 Docker Hub 查找所有镜像名包含 java，并且收藏数大于 10 的镜像</p><pre><code>runoob@runoob:~$ docker search -f stars=10 javaNAME                  DESCRIPTION                           STARS   OFFICIAL   AUTOMATEDjava                  Java is a concurrent, class-based...   1037    [OK]       anapsix/alpine-java   Oracle Java 8 (and 7) with GLIBC ...   115                [OK]develar/java                                                 46                 [OK]isuper/java-oracle    This repository contains all java...   38                 [OK]lwieske/java-8        Oracle Java 8 Container - Full + ...   27                 [OK]nimmis/java-centos    This is docker images of CentOS 7...   13                 [OK]</code></pre><p>参数说明：</p><p>NAME: 镜像仓库源的名称</p><p>DESCRIPTION: 镜像的描述</p><p>OFFICIAL: 是否 docker 官方发布</p><p>stars: 类似 Github 里面的 star，表示点赞、喜欢的意思。</p><p>AUTOMATED: 自动构建。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;容器rootfs命令&quot;&gt;&lt;a href=&quot;#容器rootfs命令&quot; class=&quot;headerlink&quot; title=&quot;容器rootfs命令&quot;&gt;&lt;/a&gt;容器rootfs命令&lt;/h1&gt;&lt;p&gt;本文取自&lt;a href=&quot;https://www.runoob.com/docker/docker-rm-command.html&quot;&gt;https://www.runoob.com/docker/docker-rm-command.html&lt;/a&gt;，博主整理这些命令主要是方便自己或其他需要的人来查阅&lt;/p&gt;
&lt;p&gt;（1）docker commit :从容器创建一个新的镜像。&lt;/p&gt;
&lt;p&gt;语法&lt;br&gt;docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]&lt;br&gt;OPTIONS说明：&lt;/p&gt;
&lt;p&gt;-a :提交的镜像作者；&lt;/p&gt;
&lt;p&gt;-c :使用Dockerfile指令来创建镜像；&lt;/p&gt;
&lt;p&gt;-m :提交时的说明文字；&lt;/p&gt;
&lt;p&gt;-p :在commit时，将容器暂停。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>docker命令大全-容器生命周期管理</title>
    <link href="http://example.com/2021/10/05/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8-%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2021/10/05/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8-%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86/</id>
    <published>2021-10-05T14:45:23.000Z</published>
    <updated>2021-10-05T14:50:24.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker命令大全-容器生命周期管理"><a href="#docker命令大全-容器生命周期管理" class="headerlink" title="docker命令大全-容器生命周期管理"></a>docker命令大全-容器生命周期管理</h1><p>本文取自<a href="https://www.runoob.com/docker/docker-rm-command.html">https://www.runoob.com/docker/docker-rm-command.html</a>，博主整理这些命令主要是方便自己或其他需要的人来查阅</p><p>（1）docker start :启动一个或多个已经被停止的容器</p><p>docker stop :停止一个运行中的容器</p><p>docker restart :重启容器</p><span id="more"></span><p>语法<br>docker start [OPTIONS] CONTAINER [CONTAINER…]</p><p>docker stop [OPTIONS] CONTAINER [CONTAINER…]</p><p>docker restart [OPTIONS] CONTAINER [CONTAINER…]</p><p>实例</p><p>启动已被停止的容器myrunoob</p><p>docker start myrunoob<br>停止运行中的容器myrunoob</p><p>docker stop myrunoob<br>重启容器myrunoob</p><p>docker restart myrunoob</p><hr><p>（2）<br>docker run ：创建一个新的容器并运行一个命令</p><p>语法<br>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p><p>OPTIONS说明：</p><p>-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</p><p>-d: 后台运行容器，并返回容器ID；</p><p>-i: 以交互模式运行容器，通常与 -t 同时使用；</p><p>-P: 随机端口映射，容器内部端口随机映射到主机的端口</p><p>-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</p><p>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p><p>–name=”nginx-lb”: 为容器指定一个名称；</p><p>–dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</p><p>–dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</p><p>-h “mars”: 指定容器的hostname；</p><p>-e username=”ritchie”: 设置环境变量；</p><p>–env-file=[]: 从指定文件读入环境变量；</p><p>–cpuset=”0-2” or –cpuset=”0,1,2”: 绑定容器到指定CPU运行；</p><p>-m :设置容器使用内存最大值；</p><p>–net=”bridge”: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</p><p>–link=[]: 添加链接到另一个容器；</p><p>–expose=[]: 开放一个端口或一组端口；</p><p>–volume , -v: 绑定一个卷</p><p>实例</p><p>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。</p><p>docker run –name mynginx -d nginx:latest</p><p>使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。</p><p>docker run -P -d nginx:latest</p><p>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。</p><p>docker run -p 80:80 -v /data:/data -d nginx:latest</p><p>绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。</p><p>$ docker run -p 127.0.0.1:80:8080/tcp ubuntu bash</p><p>使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</p><p>runoob@runoob:~$ docker run -it nginx:latest /bin/bash<br>root@b8573233d675:/# </p><hr><p>（3）docker kill :杀掉一个运行中的容器。</p><p>语法<br>docker kill [OPTIONS] CONTAINER [CONTAINER…]<br>OPTIONS说明：</p><p>-s :向容器发送一个信号</p><p>实例<br>杀掉运行中的容器mynginx</p><p>runoob@runoob:~$ docker kill -s KILL mynginx<br>mynginx</p><hr><p>（4）docker rm ：删除一个或多个容器。</p><p>语法<br>docker rm [OPTIONS] CONTAINER [CONTAINER…]<br>OPTIONS说明：</p><p>-f :通过 SIGKILL 信号强制删除一个运行中的容器。</p><p>-l :移除容器间的网络连接，而非容器本身。</p><p>-v :删除与容器关联的卷。</p><p>实例<br>强制删除容器 db01、db02：</p><p>docker rm -f db01 db02</p><p>移除容器 nginx01 对容器 db01 的连接，连接名 db：</p><p>docker rm -l db </p><p>删除容器 nginx01, 并删除容器挂载的数据卷：</p><p>docker rm -v nginx01</p><p>删除所有已经停止的容器：</p><p>docker rm $(docker ps -a -q）</p><hr><p>（5）docker pause :暂停容器中所有的进程。</p><p>docker unpause :恢复容器中所有的进程。</p><p>语法<br>docker pause CONTAINER [CONTAINER…]</p><p>docker unpause CONTAINER [CONTAINER…]<br>实例<br>暂停数据库容器db01提供服务。</p><p>docker pause db01</p><p>恢复数据库容器 db01 提供服务。</p><p>docker unpause db01</p><hr><p>（6）docker create ：创建一个新的容器但不启动它</p><p>用法同 docker run</p><p>语法<br>docker create [OPTIONS] IMAGE [COMMAND] [ARG…]</p><p>语法同 docker run</p><p>实例<br>使用docker镜像nginx:latest创建一个容器,并将容器命名为myrunoob</p><p>runoob@runoob:~$ docker create  –name myrunoob  nginx:latest<br>09b93464c2f75b7b69f83d56a9cfc23ceb50a48a9db7652ee4c27e3e2cb1961f</p><hr><p>(7)docker exec ：在运行的容器中执行命令</p><p>语法<br>docker exec [OPTIONS] CONTAINER COMMAND [ARG…]<br>OPTIONS说明：</p><p>-d :分离模式: 在后台运行</p><p>-i :即使没有附加也保持STDIN 打开</p><p>-t :分配一个伪终端</p><p>实例<br>在容器 mynginx 中以交互模式执行容器内 /root/runoob.sh 脚本:</p><p>runoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh<br><a href="http://www.runoob.com/">http://www.runoob.com/</a><br>在容器 mynginx 中开启一个交互模式的终端:</p><p>runoob@runoob:~$ docker exec -i -t  mynginx /bin/bash</p><p>root@b1a0703e41e7:/#<br>也可以通过 docker ps -a 命令查看已经在运行的容器，然后使用容器 ID 进入容器。</p><p>查看已经在运行的容器 ID：</p><h1 id="docker-ps-a"><a href="#docker-ps-a" class="headerlink" title="docker ps -a"></a>docker ps -a</h1><p>…<br>9df70f9a0714        openjdk             “/usercode/script.sh…”<br>…<br>第一列的 9df70f9a0714 就是容器 ID。</p><p>通过 exec 命令对指定的容器执行 bash:</p><h1 id="docker-exec-it-9df70f9a0714-bin-bash"><a href="#docker-exec-it-9df70f9a0714-bin-bash" class="headerlink" title="docker exec -it 9df70f9a0714 /bin/bash"></a>docker exec -it 9df70f9a0714 /bin/bash</h1>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;docker命令大全-容器生命周期管理&quot;&gt;&lt;a href=&quot;#docker命令大全-容器生命周期管理&quot; class=&quot;headerlink&quot; title=&quot;docker命令大全-容器生命周期管理&quot;&gt;&lt;/a&gt;docker命令大全-容器生命周期管理&lt;/h1&gt;&lt;p&gt;本文取自&lt;a href=&quot;https://www.runoob.com/docker/docker-rm-command.html&quot;&gt;https://www.runoob.com/docker/docker-rm-command.html&lt;/a&gt;，博主整理这些命令主要是方便自己或其他需要的人来查阅&lt;/p&gt;
&lt;p&gt;（1）docker start :启动一个或多个已经被停止的容器&lt;/p&gt;
&lt;p&gt;docker stop :停止一个运行中的容器&lt;/p&gt;
&lt;p&gt;docker restart :重启容器&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>docker命令大全-容器操作</title>
    <link href="http://example.com/2021/10/05/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8-%E5%AE%B9%E5%99%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/10/05/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8-%E5%AE%B9%E5%99%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2021-10-05T14:45:23.000Z</published>
    <updated>2021-10-05T15:23:11.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker的常用命令-容器操作"><a href="#docker的常用命令-容器操作" class="headerlink" title="docker的常用命令-容器操作"></a>docker的常用命令-容器操作</h1><p>本文取自<a href="https://www.runoob.com/docker/docker-rm-command.html">https://www.runoob.com/docker/docker-rm-command.html</a>，博主整理这些命令主要是方便自己或其他需要的人来查阅</p><p>（1）docker ps : 列出容器</p><p>语法<br>docker ps [OPTIONS]<br>OPTIONS说明：</p><p>-a :显示所有的容器，包括未运行的。</p><p>-f :根据条件过滤显示的内容。</p><p>–format :指定返回值的模板文件。</p><p>-l :显示最近创建的容器。</p><p>-n :列出最近创建的n个容器。</p><p>–no-trunc :不截断输出。</p><p>-q :静默模式，只显示容器编号。</p><p>-s :显示总的文件大小。</p><span id="more"></span><p>实例</p><p>列出所有在运行的容器信息。</p><p>runoob@runoob:~$ docker ps</p><p>CONTAINER ID   IMAGE          COMMAND                …  PORTS                    </p><p>NAMES</p><p>09b93464c2f7   nginx:latest   “nginx -g ‘daemon off” …  80/tcp, 443/tcp          </p><p>myrunoob</p><p>96f7f14e99ab   mysql:5.6      “docker-entrypoint.sh” …  0.0.0.0:3306-&gt;3306/tcp   </p><p>mymysql</p><p>输出详情介绍：</p><p>CONTAINER ID: 容器 ID。</p><p>IMAGE: 使用的镜像。</p><p>COMMAND: 启动容器时运行的命令。</p><p>CREATED: 容器的创建时间。</p><p>STATUS: 容器状态。</p><p>状态有7种：</p><p>created（已创建）</p><p>restarting（重启中）</p><p>running（运行中）</p><p>removing（迁移中）</p><p>paused（暂停）</p><p>exited（停止）</p><p>dead（死亡）</p><p>PORTS: 容器的端口信息和使用的连接类型（tcp\udp）。</p><p>NAMES: 自动分配的容器名称。</p><p>列出最近创建的5个容器信息。</p><p>runoob@runoob:~$ docker ps -n 5</p><pre><code>             CONTAINER ID           IMAGE               COMMAND                   CREATED                        09b93464c2f7        nginx:latest        &quot;nginx -g &#39;daemon off&quot;    2 days ago   ...                  b8573233d675       nginx:latest        &quot;/bin/bash&quot;               2 days ago   ...                  b1a0703e41e7        nginx:latest        &quot;nginx -g &#39;daemon off&quot;    2 days ago   ...                 f46fb1dec520        5c6e1090e771        &quot;/bin/sh -c &#39;set -x \t&quot;   2 days ago   ...                a63b4a5597de        860c279d2fec        &quot;bash&quot;                    2 days ago   ...</code></pre><p>列出所有创建的容器ID。</p><p>runoob@runoob:~$ docker ps -a -q<br>09b93464c2f7</p><p>b8573233d675</p><p>b1a0703e41e7</p><p>f46fb1dec520</p><p>a63b4a5597de</p><p>6a4aa42e947b</p><p>de7bb36e7968</p><p>43a432b73776</p><p>664a8ab1a585</p><p>ba52eb632bbd</p><p>…</p><hr><p>(2)docker inspect : 获取容器/镜像的元数据。</p><p>语法<br>docker inspect [OPTIONS] NAME|ID [NAME|ID…]<br>OPTIONS说明：</p><p>-f :指定返回值的模板文件。</p><p>-s :显示总的文件大小。</p><p>–type :为指定类型返回JSON。</p><p>实例<br>获取镜像mysql:5.6的元信息。</p><p><img src="https://i.loli.net/2021/10/05/1U2Z7fXBasKrCIM.png" alt="1"></p><p>获取正在运行的容器mymysql的 IP。</p><p>``runoob@runoob:~$ docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mymysql172.17.0.3```</p><p>(3)docker top :查看容器中运行的进程信息，支持 ps 命令参数。</p><p>语法<br>docker top [OPTIONS] CONTAINER [ps OPTIONS]</p><p>容器运行时不一定有/bin/bash终端来交互执行top命令，而且容器还不一定有top命令，可以使用docker top来实现查看container中正在运行的进程。</p><p>实例<br>查看容器mymysql的进程信息。</p><pre><code>       runoob@runoob:~/mysql$ docker top mymysql       UID    PID    PPID    C      STIME   TTY  TIME       CMD       999    40347  40331   18     00:58   ?    00:00:02   mysqld</code></pre><p>查看所有运行容器的进程信息。</p><p>for i in  <code>docker ps |grep Up|awk &#39;&#123;print $1&#125;&#39;</code>;do echo \ &amp;&amp;docker top $i; done</p><hr><p>(3)docker attach :连接到正在运行中的容器。</p><p>语法<br>docker attach [OPTIONS] CONTAINER<br>要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。</p><p>官方文档中说attach后可以通过CTRL-C来detach，但实际上经过我的测试，如果container当前在运行bash，CTRL-C自然是当前行的输入，没有退出；如果container当前正在前台运行进程，如输出nginx的access.log日志，CTRL-C不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在attach是可以带上–sig-proxy=false来确保CTRL-D或CTRL-C不会关闭容器。</p><p>实例<br>容器mynginx将访问日志指到标准输出，连接到容器查看访问信息。</p><pre><code>    runoob@runoob:~$ docker attach --sig-proxy=false mynginx        192.168.239.1 - - [10/Jul/2016:16:54:26 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot;     &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)     Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;</code></pre><hr><p>(4)docker events : 从服务器获取实时事件</p><p>语法<br>docker events [OPTIONS]<br>OPTIONS说明：</p><p>-f ：根据条件过滤事件；</p><p>–since ：从指定的时间戳后显示所有事件;</p><p>–until ：流水时间显示到指定的时间为止；</p><p>实例<br>显示docker 2016年7月1日后的所有事件。</p><pre><code> runoob@runoob:~/mysql$ docker events  --since=&quot;1467302400&quot; 2016-07-08T19:44:54.501277677+08:00 network connect  66f958fd13dc4314ad20034e576d5c5eba72e0849dcc38ad9e8436314a4149d4 (container=b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64, name=bridge, type=bridge) 2016-07-08T19:44:54.723876221+08:00 container start b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (image=nginx:latest, name=elegant_albattani) 2016-07-08T19:44:54.726110498+08:00 container resize b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (height=39, image=nginx:latest, name=elegant_albattani, width=167) 2016-07-08T19:46:22.137250899+08:00 container die b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (exitCode=0, image=nginx:latest, name=elegant_albattani) ...</code></pre><p>显示docker 镜像为mysql:5.6 2016年7月1日后的相关事件。</p><pre><code>runoob@runoob:~/mysql$ docker events -f &quot;image&quot;=&quot;mysql:5.6&quot; --since=&quot;1467302400&quot; 2016-07-11T00:38:53.975174837+08:00 container start 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (image=mysql:5.6, name=mymysql)2016-07-11T00:51:17.022572452+08:00 container kill 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (image=mysql:5.6, name=mymysql, signal=9)2016-07-11T00:51:17.132532080+08:00 container die 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (exitCode=137, image=mysql:5.6, name=mymysql)2016-07-11T00:51:17.514661357+08:00 container destroy 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (image=mysql:5.6, name=mymysql)2016-07-11T00:57:18.551984549+08:00 container create c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)2016-07-11T00:57:18.557405864+08:00 container attach c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)2016-07-11T00:57:18.844134112+08:00 container start c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)2016-07-11T00:57:19.140141428+08:00 container die c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (exitCode=1, image=mysql:5.6, name=mymysql)2016-07-11T00:58:05.941019136+08:00 container destroy c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)2016-07-11T00:58:07.965128417+08:00 container create a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)2016-07-11T00:58:08.188734598+08:00 container start a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)2016-07-11T00:58:20.010876777+08:00 container top a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)2016-07-11T01:06:01.395365098+08:00 container top a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)</code></pre><p>如果指定的时间是到秒级的，需要将时间转成时间戳。如果时间为日期的话，可以直接使用，如–since=”2016-07-01”。</p><hr><p>(5)docker logs : 获取容器的日志</p><p>语法<br>docker logs [OPTIONS] CONTAINER<br>OPTIONS说明：</p><p>-f : 跟踪日志输出</p><p>–since :显示某个开始时间的所有日志</p><p>-t : 显示时间戳</p><p>–tail :仅列出最新N条容器日志</p><p>实例<br>跟踪查看容器mynginx的日志输出。</p><pre><code>runoob@runoob:~$ docker logs -f mynginx192.168.239.1 - - [10/Jul/2016:16:53:33 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;2016/07/10 16:53:33 [error] 5#5: *1 open() &quot;/usr/share/nginx/html/favicon.ico&quot; failed (2: No such file or directory), client: 192.168.239.1, server: localhost, request: &quot;GET /favicon.ico HTTP/1.1&quot;, host: &quot;192.168.239.130&quot;, referrer: &quot;http://192.168.239.130/&quot;192.168.239.1 - - [10/Jul/2016:16:53:33 +0000] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://192.168.239.130/&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;192.168.239.1 - - [10/Jul/2016:16:53:59 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;</code></pre><p>…<br>查看容器mynginx从2016年7月1日后的最新10条日志。</p><p>docker logs –since=”2016-07-01” –tail=10 mynginx</p><hr><p>(6)docker wait : 阻塞运行直到容器停止，然后打印出它的退出代码。</p><p>语法</p><p>docker wait [OPTIONS] CONTAINER [CONTAINER…]</p><p>实例<br>docker wait CONTAINER</p><hr><p>(7)docker export :将文件系统作为一个tar归档文件导出到STDOUT。</p><p>语法<br>docker export [OPTIONS] CONTAINER</p><p>OPTIONS说明：</p><p>-o :将输入内容写到文件。</p><p>实例<br>将id为a404c6c174a2的容器按日期保存为tar文件。</p><pre><code> runoob@runoob:~$ docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2 runoob@runoob:~$ ls mysql-`date +%Y%m%d`.tar mysql-20160711.tar</code></pre><p>(8)docker port :列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口。</p><p>语法</p><p>docker port [OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]</p><p>实例<br>查看容器mynginx的端口映射情况。</p><p>runoob@runoob:~$ docker port mymysql<br>3306/tcp -&gt; 0.0.0.0:3306</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;docker的常用命令-容器操作&quot;&gt;&lt;a href=&quot;#docker的常用命令-容器操作&quot; class=&quot;headerlink&quot; title=&quot;docker的常用命令-容器操作&quot;&gt;&lt;/a&gt;docker的常用命令-容器操作&lt;/h1&gt;&lt;p&gt;本文取自&lt;a href=&quot;https://www.runoob.com/docker/docker-rm-command.html&quot;&gt;https://www.runoob.com/docker/docker-rm-command.html&lt;/a&gt;，博主整理这些命令主要是方便自己或其他需要的人来查阅&lt;/p&gt;
&lt;p&gt;（1）docker ps : 列出容器&lt;/p&gt;
&lt;p&gt;语法&lt;br&gt;docker ps [OPTIONS]&lt;br&gt;OPTIONS说明：&lt;/p&gt;
&lt;p&gt;-a :显示所有的容器，包括未运行的。&lt;/p&gt;
&lt;p&gt;-f :根据条件过滤显示的内容。&lt;/p&gt;
&lt;p&gt;–format :指定返回值的模板文件。&lt;/p&gt;
&lt;p&gt;-l :显示最近创建的容器。&lt;/p&gt;
&lt;p&gt;-n :列出最近创建的n个容器。&lt;/p&gt;
&lt;p&gt;–no-trunc :不截断输出。&lt;/p&gt;
&lt;p&gt;-q :静默模式，只显示容器编号。&lt;/p&gt;
&lt;p&gt;-s :显示总的文件大小。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>docker命令大全-本地镜像管理及Docker info 命令</title>
    <link href="http://example.com/2021/10/05/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8-%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86%E4%B8%8Einfoversion/"/>
    <id>http://example.com/2021/10/05/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8-%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86%E4%B8%8Einfoversion/</id>
    <published>2021-10-05T14:45:23.000Z</published>
    <updated>2021-10-05T14:48:43.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地镜像管理"><a href="#本地镜像管理" class="headerlink" title="本地镜像管理"></a>本地镜像管理</h1><p>本文取自<a href="https://www.runoob.com/docker/docker-rm-command.html">https://www.runoob.com/docker/docker-rm-command.html</a>，博主整理这些命令主要是方便自己或其他需要的人来查阅</p><p>(1)docker images : 列出本地镜像。</p><p>语法<br>docker images [OPTIONS] [REPOSITORY[:TAG]]<br>OPTIONS说明：</p><p>-a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</p><p>–digests :显示镜像的摘要信息；</p><p>-f :显示满足条件的镜像；</p><p>–format :指定返回值的模板文件；</p><p>–no-trunc :显示完整的镜像信息；</p><p>-q :只显示镜像ID。<span id="more"></span></p><p>实例<br>查看本地镜像列表。</p><pre><code> runoob@runoob:~$ docker images REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE mymysql                 v1                  37af1236adef        5 minutes ago       329 MBrunoob/ubuntu           v4                  1c06aa18edee        2 days ago          142.1 MB&lt;none&gt;                  &lt;none&gt;              5c6e1090e771        2 days ago          165.9 MBhttpd                   latest              ed38aaffef30        11 days ago         195.1 MBalpine                  latest              4e38e38c8ce0        2 weeks ago         4.799 MBmongo                   3.2                 282fd552add6        3 weeks ago         336.1 MBredis                   latest              4465e4bcad80        3 weeks ago         185.7 MBphp                     5.6-fpm             025041cd3aa5        3 weeks ago         456.3 MBpython                  3.5                 045767ddf24a        3 weeks ago         684.1 MB</code></pre><p>…<br>列出本地镜像中REPOSITORY为ubuntu的镜像列表。</p><pre><code>root@runoob:~# docker images  ubuntuREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEubuntu              14.04               90d5884b1ee0        9 weeks ago         188 MBubuntu              15.10               4e3b13c8a266        3 months ago        136.3 MB</code></pre><hr><p>(2)docker rmi : 删除本地一个或多个镜像。</p><p>语法<br>docker rmi [OPTIONS] IMAGE [IMAGE…]<br>OPTIONS说明：</p><p>-f :强制删除；</p><p>–no-prune :不移除该镜像的过程镜像，默认移除；</p><p>实例<br>强制删除本地镜像 runoob/ubuntu:v4。</p><pre><code>root@runoob:~# docker rmi -f runoob/ubuntu:v4Untagged: runoob/ubuntu:v4Deleted: sha256:1c06aa18edee44230f93a90a7d88139235de12cd4c089d41eed8419b503072beDeleted: sha256:85feb446e89a28d58ee7d80ea5ce367eebb7cec70f0ec18aa4faa874cbd97c73</code></pre><hr><p>(3)docker tag : 标记本地镜像，将其归入某一仓库。</p><p>语法<br>docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]</p><p>实例<br>将镜像ubuntu:15.10标记为 runoob/ubuntu:v3 镜像。</p><pre><code>root@runoob:~# docker tag ubuntu:15.10 runoob/ubuntu:v3root@runoob:~# docker images   runoob/ubuntu:v3REPOSITORY          TAG                 IMAGE ID            CREATED             SIZErunoob/ubuntu       v3                  4e3b13c8a266        3 months ago        136.3 MB</code></pre><hr><p>(4)docker build 命令用于使用 Dockerfile 创建镜像。</p><p>语法<br>docker build [OPTIONS] PATH | URL | -<br>OPTIONS说明：</p><p>–build-arg=[] :设置镜像创建时的变量；</p><p>–cpu-shares :设置 cpu 使用权重；</p><p>–cpu-period :限制 CPU CFS周期；</p><p>–cpu-quota :限制 CPU CFS配额；</p><p>–cpuset-cpus :指定使用的CPU id；</p><p>–cpuset-mems :指定使用的内存 id；</p><p>–disable-content-trust :忽略校验，默认开启；</p><p>-f :指定要使用的Dockerfile路径；</p><p>–force-rm :设置镜像过程中删除中间容器；</p><p>–isolation :使用容器隔离技术；</p><p>–label=[] :设置镜像使用的元数据；</p><p>-m :设置内存最大值；</p><p>–memory-swap :设置Swap的最大值为内存+swap，”-1”表示不限swap；</p><p>–no-cache :创建镜像的过程不使用缓存；</p><p>–pull :尝试去更新镜像的新版本；</p><p>–quiet, -q :安静模式，成功后只输出镜像 ID；</p><p>–rm :设置镜像成功后删除中间容器；</p><p>–shm-size :设置/dev/shm的大小，默认值是64M；</p><p>–ulimit :Ulimit配置。</p><p>–squash :将 Dockerfile 中所有的操作压缩为一层。</p><p>–tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</p><p>–network: 默认 default。在构建期间设置RUN指令的网络模式</p><p>实例<br>使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。</p><pre><code> docker build -t runoob/ubuntu:v1 . </code></pre><p>使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像。</p><pre><code> docker build github.com/creack/docker-firefox</code></pre><p>也可以通过 -f Dockerfile 文件的位置：</p><pre><code>$ docker build -f /path/to/a/Dockerfile .</code></pre><p>在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回：</p><pre><code>$ docker build -t test/myapp .Sending build context to Docker daemon 2.048 kBError response from daemon: Unknown instruction: RUNCMD</code></pre><hr><p>(5)docker history : 查看指定镜像的创建历史。</p><p>语法<br>docker history [OPTIONS] IMAGE</p><p>OPTIONS说明：</p><p>-H :以可读的格式打印镜像大小和日期，默认为true；</p><p>–no-trunc :显示完整的提交记录；</p><p>-q :仅列出提交记录ID。</p><p>实例<br>查看本地镜像runoob/ubuntu:v3的创建历史。</p><pre><code>root@runoob:~# docker history runoob/ubuntu:v3IMAGE             CREATED           CREATED BY                                      SIZE      COMMENT4e3b13c8a266      3 months ago      /bin/sh -c #(nop) CMD [&quot;/bin/bash&quot;]             0 B                 &lt;missing&gt;         3 months ago      /bin/sh -c sed -i &#39;s/^#\s*\(deb.*universe\)$/   1.863 kB            &lt;missing&gt;         3 months ago      /bin/sh -c set -xe   &amp;&amp; echo &#39;#!/bin/sh&#39; &gt; /u   701 B               &lt;missing&gt;         3 months ago      /bin/sh -c #(nop) ADD file:43cb048516c6b80f22   136.3 MB</code></pre><hr><p>(6)docker save : 将指定镜像保存成 tar 归档文件。</p><p>语法<br>docker save [OPTIONS] IMAGE [IMAGE…]</p><p>OPTIONS 说明：</p><p>-o :输出到的文件。</p><p>实例<br>将镜像 runoob/ubuntu:v3 生成 my_ubuntu_v3.tar 文档</p><pre><code>runoob@runoob:~$ docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3runoob@runoob:~$ ll my_ubuntu_v3.tar-rw------- 1 runoob runoob 142102016 Jul 11 01:37 my_ubuntu_v3.ta</code></pre><hr><p>(7)docker load : 导入使用 docker save 命令导出的镜像。</p><p>语法<br>docker load [OPTIONS]</p><p>OPTIONS 说明：</p><p>–input , -i : 指定导入的文件，代替 STDIN。</p><p>–quiet , -q : 精简输出信息。</p><p>实例<br>导入镜像：</p><pre><code>$ docker image ls REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE$ docker load &lt; busybox.tar.gzLoaded image: busybox:latest$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEbusybox             latest              769b9341d937        7 weeks ago         2.489 MB$ docker load --input fedora.tarLoaded image: fedora:rawhideLoaded image: fedora:20$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEbusybox             latest              769b9341d937        7 weeks ago         2.489 MBfedora              rawhide             0d20aec6529d        7 weeks ago         387 MBfedora              20                  58394af37342        7 weeks ago         385.5 MBfedora              heisenbug           58394af37342        7 weeks ago         385.5 MBfedora              latest              58394af37342        7 weeks ago         385.5 MB</code></pre><hr><p>(8)docker import : 从归档文件中创建镜像。</p><p>语法<br>docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</p><p>OPTIONS说明：</p><p>-c :应用docker 指令创建镜像；</p><p>-m :提交时的说明文字；</p><p>实例<br>从镜像归档文件my_ubuntu_v3.tar创建镜像，命名为runoob/ubuntu:v4</p><pre><code>runoob@runoob:~$ docker import  my_ubuntu_v3.tar runoob/ubuntu:v4  sha256:63ce4a6d6bc3fabb95dbd6c561404a309b7bdfc4e21c1d59fe9fe4299cbfea39runoob@runoob:~$ docker images runoob/ubuntu:v4REPOSITORY          TAG                 IMAGE ID            CREATED             SIZErunoob/ubuntu       v4                  63ce4a6d6bc3        20 seconds ago      142.1 MB</code></pre><hr><h1 id="Docker-info-命令"><a href="#Docker-info-命令" class="headerlink" title="Docker info 命令"></a>Docker info 命令</h1><p>(1)docker info : 显示 Docker 系统信息，包括镜像和容器数。。</p><p>语法<br>docker info [OPTIONS]</p><p>实例<br>查看docker系统信息。</p><pre><code>$ docker infoContainers: 12Images: 41Storage Driver: aufsRoot Dir: /var/lib/docker/aufsBacking Filesystem: extfsDirs: 66Dirperm1 Supported: falseExecution Driver: native-0.2Logging Driver: json-fileKernel Version: 3.13.0-32-genericOperating System: Ubuntu 14.04.1 LTSCPUs: 1Total Memory: 1.954 GiBName: iZ23mtq8bs1ZID: M5N4:K6WN:PUNC:73ZN:AONJ:AUHL:KSYH:2JPI:CH3K:O4MK:6OCX:5OYW</code></pre><hr><p>(2)docker version :显示 Docker 版本信息。</p><p>语法<br>docker version [OPTIONS]</p><p>OPTIONS说明：</p><p>-f :指定返回值的模板文件。</p><p>实例<br>显示 Docker 版本信息。</p><pre><code>$ docker versionClient:Version:      1.8.2API version:  1.20Go version:   go1.4.2Git commit:   0a8c2e3Built:        Thu Sep 10 19:19:00 UTC 2015OS/Arch:      linux/amd64Server:Version:      1.8.2API version:  1.20Go version:   go1.4.2Git commit:   0a8c2e3Built:        Thu Sep 10 19:19:00 UTC 2015OS/Arch:      linux/amd64</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;本地镜像管理&quot;&gt;&lt;a href=&quot;#本地镜像管理&quot; class=&quot;headerlink&quot; title=&quot;本地镜像管理&quot;&gt;&lt;/a&gt;本地镜像管理&lt;/h1&gt;&lt;p&gt;本文取自&lt;a href=&quot;https://www.runoob.com/docker/docker-rm-command.html&quot;&gt;https://www.runoob.com/docker/docker-rm-command.html&lt;/a&gt;，博主整理这些命令主要是方便自己或其他需要的人来查阅&lt;/p&gt;
&lt;p&gt;(1)docker images : 列出本地镜像。&lt;/p&gt;
&lt;p&gt;语法&lt;br&gt;docker images [OPTIONS] [REPOSITORY[:TAG]]&lt;br&gt;OPTIONS说明：&lt;/p&gt;
&lt;p&gt;-a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；&lt;/p&gt;
&lt;p&gt;–digests :显示镜像的摘要信息；&lt;/p&gt;
&lt;p&gt;-f :显示满足条件的镜像；&lt;/p&gt;
&lt;p&gt;–format :指定返回值的模板文件；&lt;/p&gt;
&lt;p&gt;–no-trunc :显示完整的镜像信息；&lt;/p&gt;
&lt;p&gt;-q :只显示镜像ID。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL 注入原理分析（学习笔记）</title>
    <link href="http://example.com/2021/10/02/sql%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2021/10/02/sql%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86/</id>
    <published>2021-10-02T14:45:23.000Z</published>
    <updated>2021-10-05T14:44:14.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL-注入原理分析（学习笔记）"><a href="#SQL-注入原理分析（学习笔记）" class="headerlink" title="SQL 注入原理分析（学习笔记）"></a>SQL 注入原理分析（学习笔记）</h1><p><strong>1.SQL语言介绍</strong></p><p>​       SQL 全称是“结构化查询语言( Structured Query Language)”, 最早是IBM的圣约瑟研究实验室为其关系数据库管理系统SYSTEMR开发的一种查询语言,它的前身是SQUARE语言。SQL语言结构简洁,功能强大,简单易学,所以自从IBM公司1981年推出以来, SQL语言得到了广泛的应用。</p><p>​        结构化查询语言SQL是一种介于关系代数与关系演算之间的语言,其功能包括查询、操纵、定义和控制四个方面,是一个通用的功能极强的关系数据库标准语言。在SQL语言中不需要告诉SQL如何访问数据库,只要告诉SQL需要数据库做什么。</p><span id="more"></span><p><strong>2.SQL注入产生原因</strong></p><p>​       在现在网络技术于信息技术高速发展的时代，越来越多程序编写应用于B/S模式，而BS模式建立在互联网上，对安全的控制能力较弱，由于开发人员的水平和经验参差不齐，相当一部分的程序员编写代码没有对用户输入的数据或者是页面中所携带的信息进行必要的合法性判断。攻击者利用这个机会提交一段数据库查询代码，根据程序返回的结果，就可以获得一些数据库信息。</p><p><strong>3.SQL注入核心原理</strong></p><p>​        SQL注入（SQLi）是一种注入攻击，可以执行恶意SQL语句。它通过将任意SQL代码插入数据库查询，使攻击者能够完全控制Web应用程序后面的数据库服务器。攻击者可以使用SQL注入漏洞绕过应用程序安全措施；可以绕过网页或Web应用程序的身份验证和授权，并检索整个SQL数据库的内容；还可以使用SQL注入来添加，修改和删除数据库中的记录。</p><p>​        SQL注入漏洞可能会影响使用SQL数据库（如MySQL，Oracle，SQL Server或其他）的任何网站或Web应用程序。犯罪分子可能会利用它来未经授权访问用户的敏感数据：客户信息，个人数据，商业机密，知识产权等。SQL注入攻击是最古老，最流行，最危险的Web应用程序漏洞之一。</p><p><strong>4.四程WEB框架</strong></p><p><img src="https://i.loli.net/2021/10/01/xwctmrQfHguEFi4.png" alt="1"></p><p>ps.灵活的SQL查询语句+用户输入的数据代入了SQL语句=用户直接操作数据库—&gt;SQL注入漏洞</p><p>5.用户输入可控，代码对用户输入进行了对接，带入SQL语句，产生SQL注入漏洞</p><p>eg：<a href="http://xxx.com/index.php?id=1">http://xxx.com/index.php?id=1</a>  UNION SELECT 1,version()#</p><p>​        <strong>↑</strong>                            <strong>↑</strong></p><p>正常输入                           用户输入可自由控制</p><p><img src="https://i.loli.net/2021/10/01/XsYkwtounj1CAla.png" alt="image-20211001134230447"></p><p>select id,location from jobs where id=1——返回id为1的location</p><p>select id,location from jobs where id =1 union select 1,version()#</p><p>——返回id为1的location和数据库文本</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SQL-注入原理分析（学习笔记）&quot;&gt;&lt;a href=&quot;#SQL-注入原理分析（学习笔记）&quot; class=&quot;headerlink&quot; title=&quot;SQL 注入原理分析（学习笔记）&quot;&gt;&lt;/a&gt;SQL 注入原理分析（学习笔记）&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1.SQL语言介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​       SQL 全称是“结构化查询语言( Structured Query Language)”, 最早是IBM的圣约瑟研究实验室为其关系数据库管理系统SYSTEMR开发的一种查询语言,它的前身是SQUARE语言。SQL语言结构简洁,功能强大,简单易学,所以自从IBM公司1981年推出以来, SQL语言得到了广泛的应用。&lt;/p&gt;
&lt;p&gt;​        结构化查询语言SQL是一种介于关系代数与关系演算之间的语言,其功能包括查询、操纵、定义和控制四个方面,是一个通用的功能极强的关系数据库标准语言。在SQL语言中不需要告诉SQL如何访问数据库,只要告诉SQL需要数据库做什么。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>php 初学笔记</title>
    <link href="http://example.com/2021/09/18/php%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/09/18/php%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-18T13:45:23.000Z</published>
    <updated>2021-10-05T14:42:22.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-初学笔记——数据类型"><a href="#PHP-初学笔记——数据类型" class="headerlink" title="#PHP 初学笔记——数据类型"></a>#PHP 初学笔记——数据类型</h1><p>1.# 概念 #</p><p>PHP（PHP: Hypertext Preprocessor）<br>即“超文本预处理器”，是在服务器端执行的脚本语言，尤其适用于Web开发并可嵌入HTML中。PHP语法学习了C语言，吸纳Java和Perl多个语言的特色发展出自己的特色语法，并根据它们的长项持续改进提升自己，例如java的面向对象编程，该语言当初创建的主要目标是让开发人员快速编写出优质的web网站。 PHP同时支持面向对象和面向过程的开发，使用上非常灵活。</p><span id="more"></span><p>2.# 数据类型 #</p><p>a.PHP支持8种数据类型：</p><p>（1）integer-整形：只能整数，也可以正数或负数。</p><p>（2）folat-浮点型：是数字，和整形数据不同的是它有小数位。</p><p>（3）string-字符串型：是字符串，连续的字符序列，可以是计算机所能表示的一切字符的集合。</p><p>（4）boolean-布尔型：只有两个值真和假。</p><p>（5）array-数组：储存相同数据类型的多个数据项</p><p>（6）object-对象：储存类的实例</p><p>（7）resource-资源：储存着到外部资源的应用，如打开文件、数据库连接、图形画布区域等</p><p>（8）null-空：没有被赋值、已经被重置或赋值为null的变量。</p><p>b.PHP数据类型的转换：<br> PHP变量的数据类型是由付给它的值决定的，不用像C语言一样事先声明。</p><p>（1）（int）、（integer）：转换成整形——(int)$boo,(integer)$str</p><p>（float）、（double）、（real）：转换成浮点型——(float)$str,(doubel)$str,(real)$str</p><p>（string）：转换成字符串————(string)$boo</p><p>（bool）、（boolean）：转换成布尔类型————(bool)$num,(boolean)$str</p><p>（array）：转换成数组————(array)$str</p><p>（object）：转换成对象————(object)$str</p><p>（unset）:转换为null————(unset)$str</p><p>（2）ps.</p><pre><code>       1.&quot;=&quot;是赋值操作符。       2.在进行数据类型转换过程中应注意：转换布尔型时，null、0和未赋值的变量或数组会被转换成false，其它为true。              3.当转换成整形时，布尔型数据的false转换为0，true转换为1，浮点型的小数部分被舍去，字符串型数据如果以小数开头则截取到非数字位，否则转换为0。        4.数据类型转换还可以通过set-type（）函数完成，该函数可以将指点的变量转换为指定的数据类型。————bool settype(mixed $var,string $type)             5.参数type有7个可选值：boolean、float、integer、array、null、object和string如果转换成功，则返回true，否则返回false。       6.当将字符串转换为整形数据时，如果字符串是以数字开头的，那么先将数字部分转换为整形，在舍去后面的字符串；如果数字中含有小数点，那么截取到小数点前一位。</code></pre><p>（3）检测数据类型</p><p>1&gt;</p><p><img src="https://i.loli.net/2021/09/23/HmtT4RJpiV5YxaX.jpg" alt="检测数据类型的函数"></p><p>2&gt;例子</p><p>in_numeric()检测变量是否由数字组成</p><p><img src="https://i.loli.net/2021/09/23/ciLbxa5msF6ZMGE.jpg" alt="例子"></p><p>结果</p><p><img src="https://i.loli.net/2021/09/23/4VUEjMqfltGL2dO.jpg" alt="结果"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;PHP-初学笔记——数据类型&quot;&gt;&lt;a href=&quot;#PHP-初学笔记——数据类型&quot; class=&quot;headerlink&quot; title=&quot;#PHP 初学笔记——数据类型&quot;&gt;&lt;/a&gt;#PHP 初学笔记——数据类型&lt;/h1&gt;&lt;p&gt;1.# 概念 #&lt;/p&gt;
&lt;p&gt;PHP（PHP: Hypertext Preprocessor）&lt;br&gt;即“超文本预处理器”，是在服务器端执行的脚本语言，尤其适用于Web开发并可嵌入HTML中。PHP语法学习了C语言，吸纳Java和Perl多个语言的特色发展出自己的特色语法，并根据它们的长项持续改进提升自己，例如java的面向对象编程，该语言当初创建的主要目标是让开发人员快速编写出优质的web网站。 PHP同时支持面向对象和面向过程的开发，使用上非常灵活。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
